#Copyright (c) 2022 Qualcomm Innovation Center, Inc.​​​ All rights ​reserved.​​
#
#Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:
#
#        * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
#        * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided ​with the distribution.
#
#        * Neither the name of Qualcomm Innovation Center, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
#
#
#NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
type vendor_qccvendor, domain;

type vendor_qccvendor_exec, file_type, vendor_file_type, exec_type;

init_daemon_domain(vendor_qccvendor)

allow vendor_qccvendor vendor_qccvendor_data_file:file create_file_perms;
allow vendor_qccvendor vendor_qccvendor_data_file:dir create_dir_perms;

# allow qcc_prop
set_prop(vendor_qccvendor, vendor_qcc_prop);

# allow persist_vendor_qtr_prop
set_prop(vendor_qccvendor, vendor_qtr_prop);

# read ver_info.txt
allow vendor_qccvendor vendor_firmware_file:dir r_dir_perms;
allow vendor_qccvendor vendor_firmware_file:file r_file_perms;

# store data in sdcard
userdebug_or_eng(`
allow vendor_qccvendor fuse_device:chr_file rw_file_perms;
allow vendor_qccvendor fuse:dir create_dir_perms;
allow vendor_qccvendor fuse:file create_file_perms;
allow vendor_qccvendor mnt_user_file:dir search;
allow vendor_qccvendor mnt_user_file:lnk_file read;
')

allow vendor_qccvendor self:{ qipcrtr_socket } create_socket_perms_no_ioctl;

# qcc-vendor.alog
unix_socket_connect(vendor_qccvendor, logdr, logd);
allow vendor_qccvendor vendor_qcc_trd_data_file:file create_file_perms;
allow vendor_qccvendor vendor_qcc_trd_data_file:dir create_dir_perms;

# allow qcc-vendor to add and find vendor service
add_service(vendor_qccvendor, vendor_qtrsdkservice_service)
vndbinder_use(vendor_qccvendor)

# allow qcc-vendor to add qccvndhal service to hwservicemanager
hal_server_domain(vendor_qccvendor, vendor_hal_qccvndhal)

#Allow hwbinder call from hal client to server
binder_call(vendor_hal_qccvndhal_client, vendor_hal_qccvndhal_server)
binder_call(vendor_hal_qccvndhal_server, vendor_hal_qccvndhal_client)

#allow access to qccsyshal
hal_client_domain(vendor_qccvendor, vendor_qccsyshal);

# tombstone
crash_dump_fallback(vendor_qccvendor)

hal_attribute_service(vendor_hal_qccvndhal, vendor_hal_qccvndhal_service)

#to avoid an avc denial
#avc: denied { call } for scontext=u:r:vendor_qccvendor:s0 tcontext=u:r:servicemanager:s0 tclass=binder permissive=0
binder_call(vendor_qccvendor, servicemanager)

allow vendor_qccvendor vendor_persist_qcc_file:dir rw_dir_perms;
allow vendor_qccvendor vendor_persist_qcc_file:file create_file_perms;
allow vendor_qccvendor mnt_vendor_file:dir search;
